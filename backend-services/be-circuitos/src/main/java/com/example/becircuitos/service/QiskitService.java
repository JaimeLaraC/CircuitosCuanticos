package com.example.becircuitos.service;

import com.example.becircuitos.dto.QiskitGenerationResultDto;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.util.Map;

@Service
public class QiskitService {

    private static final Logger logger = LoggerFactory.getLogger(QiskitService.class);
    private final ObjectMapper objectMapper = new ObjectMapper(); // For converting truthTable to JSON string

    /**
     * Placeholder method to simulate Qiskit code generation from a truth table.
     * The actual Qiskit generation logic would be very complex.
     *
     * @param truthTable A Map representing the truth table.
     *                   The structure of this map will determine the qubitCount.
     *                   For example, number of input variables.
     * @return A DTO containing mocked qiskitCode, calculated qubitCount, and the input truth table as JSON.
     */
    public QiskitGenerationResultDto generateQiskitFromTruthTable(Map<String, Object> truthTable) {
        if (truthTable == null || truthTable.isEmpty()) {
            // Or throw an IllegalArgumentException
            logger.warn("Truth table input is null or empty.");
            return new QiskitGenerationResultDto("ERROR: Truth table cannot be empty.", 0, "{}");
        }

        // --- Mock Qubit Count Calculation ---
        // This is a very simplistic way to determine qubit count.
        // A real implementation would parse the truth table structure.
        // Let's assume the number of keys in the first entry (if it's a list of maps)
        // or number of top-level keys (if it's a simple map of inputs to output)
        // indicates inputs, and add 1 for an output qubit if not included.
        // For simplicity, let's say number of keys in the truthTable map roughly equals number of inputs.
        // Or, if there's a specific key like "inputs" or "outputs".
        //
        // Example: if truthTable = {"truth_table_data": {"00": "1", "01": "0", ...}, "num_vars": 2}
        // For this placeholder, let's assume `truthTable.size()` can be a proxy for complexity,
        // or a specific field `numQubits` or `numInputs` is passed within the truthTable map.

        int qubitCount = 0;
        Object numInputsObj = truthTable.get("numInputs"); // Expect client to send this for simplicity
        if (numInputsObj instanceof Number) {
            qubitCount = ((Number) numInputsObj).intValue();
        } else {
            // Fallback: very naive guess based on map size, not robust.
            qubitCount = Math.max(1, truthTable.size());
            logger.info("No 'numInputs' field in truthTable, guessing qubitCount as: {}", qubitCount);
        }

        // Ensure qubitCount is at least 1 if table is not empty.
        if (qubitCount == 0 && !truthTable.isEmpty()) qubitCount = 1;


        // --- Mock Qiskit Code ---
        String mockQiskitCode = "# Mock Qiskit Code Generated by BE Circuitos\n"
                              + "from qiskit import QuantumCircuit, transpile\n"
                              + "from qiskit_aer import AerSimulator\n\n"
                              + "# Create a quantum circuit with " + qubitCount + " qubits\n"
                              + "qc = QuantumCircuit(" + qubitCount + ", " + qubitCount + ")\n\n"
                              + "# Add some mock gates (example)\n";

        for (int i = 0; i < qubitCount; i++) {
            mockQiskitCode += "qc.h(" + i + ") # Apply Hadamard gate to qubit " + i + "\n";
        }
        mockQiskitCode += "\n# Measure qubits\n"
                        + "qc.measure(range(" + qubitCount + "), range(" + qubitCount + "))\n\n"
                        + "# Simulate the circuit (mock execution)\n"
                        + "# simulator = AerSimulator()\n"
                        + "# compiled_circuit = transpile(qc, simulator)\n"
                        + "# job = simulator.run(compiled_circuit, shots=1024)\n"
                        + "# result = job.result()\n"
                        + "# counts = result.get_counts(qc)\n"
                        + "# print('\\nTotal counts are:', counts)\n\n"
                        + "print(qc.draw(output='text')) # Draw the circuit\n";

        String truthTableJson;
        try {
            truthTableJson = objectMapper.writeValueAsString(truthTable);
        } catch (JsonProcessingException e) {
            logger.error("Error serializing truthTable to JSON", e);
            truthTableJson = "{\"error\": \"Could not serialize truth table\"}";
        }

        logger.info("Generated mock Qiskit code for {} qubits.", qubitCount);
        return new QiskitGenerationResultDto(mockQiskitCode, qubitCount, truthTableJson);
    }
}
